 # Copyright 2005-2015 Varghese Mathew (Matt)
 # 
 # This file is part of Coconut (TM).
 # Coconut is a
 #     Multi-threaded simulation of the pipeline of a MIPS-like
 #     Microprocessor (integer instructions only) replete with 
 #     Memory Subsystem, Caches and their performance analysis,
 #     I/O device modules and an assembler.
 # 
 # Coconut is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 # 
 # Coconut is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 # 
 # You should have received a copy of the GNU General Public License
 # along with Coconut.  If not, see <http://www.gnu.org/licenses/>.
 # 

	begin	1024
	start	1024
	
	j	MAIN
	
	dw	[200]
STACK

#------------------------------------------------------------
# The main block

MAIN

	addi	$sp, $zero, STACK	# set up the stack
	lui	$sp, STACK
	
	addi	$a0, $zero, 257		# the number to be printed
	jal	PRINTINT
	
	j	EXIT

#------------------------------------------------------------



#------------------------------------------------------------
# Procedure to print an integer
# a0 - integer to be printed

PRINTINT
	addi	$sp, $sp, -16
	sw	$a0, 0($sp)
	sw	$t0, 4($sp)
	sw	$t1, 8($sp)
	sw	$t2, 12($sp)
	
	addi	$t0, $zero, 10
	add	$t2, $zero, $zero
	
	bgez	$a0, PRINTINT_LOOP1
	addi	$t1, $zero, '-'
	dout	$t1, 2			# print the - sign
	
PRINTINT_LOOP1
	div	$a0, $t0
	mflo	$a0			# quotient
	mfhi	$t1			# the remainder
	addi	$t1, $t1, '0'		# make it a character
	addi	$t2, $t2, 1		# keep count of number of digits placed on stack
	addi	$sp, $sp, -4
	sw	$t1, 0($sp)		# place the digit on the stack
	bne	$a0, $zero, PRINTINT_LOOP1
	
PRINTINT_LOOP2
	lw	$t1, 0($sp)		# take the digit off the stack
	addi	$sp, $sp, 4
	addi	$t2, $t2, -1		# decrement count
	dout	$t1, 2			# display the digit
	bne	$t2, $zero, PRINTINT_LOOP2	# if there are more digits, loop
	
	lw	$a0, 0($sp)
	lw	$t0, 4($sp)
	lw	$t1, 8($sp)
	lw	$t2, 12($sp)
	addi	$sp, $sp, 16
	jr	$ra
	
#------------------------------------------------------------


EXIT
	end
